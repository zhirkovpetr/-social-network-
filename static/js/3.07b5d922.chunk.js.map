{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/NewDialogsMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","React","memo","props","className","s","dialog","active","alt","src","to","id","activeClassName","activeLink","name","Message","message","maxValue","maxLengthCreator","NewDialogsMessageForm","onSubmit","handleSubmit","inputButton","Field","placeholder","component","Textarea","validate","required","NewDialogsMessageReduxForm","reduxForm","form","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","index","dialogsItems","AddMessage","newMessage","compose","connect","state","withAuthRedirect"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,WAAa,4BAA4B,OAAS,wBAAwB,SAAW,0BAA0B,YAAc,+B,4HCQlNC,EAAYC,IAAMC,MAAK,SAACC,GACjC,OAAO,sBAAKC,UAAWC,IAAEC,OAAQ,IAAKD,IAAEE,OAAjC,UACP,qBAAKC,IAAK,SAAUC,IAAI,iIACxB,cAAC,IAAD,CAASC,GAAI,YAAaP,EAAMQ,GAAIC,gBAAiBP,IAAEQ,WAAvD,SAAoEV,EAAMW,aCJjEC,G,OAAQd,IAAMC,MAAK,SAACC,GAC7B,OAAO,qBAAKC,UAAWC,IAAEW,QAAlB,SAA4Bb,EAAMa,c,kCCAvCC,EAAUC,YAAiB,KAEpBC,EAAwBlB,IAAMC,MAAK,SAACC,GAC7C,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAcjB,UAAWC,IAAEiB,YAAjD,UACI,cAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBV,KAAM,aAAcW,UAAWC,IAAUC,SAAU,CAAEC,IAAUX,KACzG,gDAKCY,EAA4B5B,IAAMC,KAAK4B,YAAwB,CAACC,KAAM,qBAA/BD,CAAqDX,ICP5Fa,EAAsC/B,IAAMC,MAAK,SAACC,GAG3D,IAKI8B,EAAkB9B,EAAM+B,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAChD,cAACrC,EAAD,CAAYW,GAAI0B,EAAE1B,GAAIG,KAAMuB,EAAEvB,UAE9BwB,EAAmBnC,EAAM+B,YAAYK,SAASH,KAAI,SAAUI,EAAGC,GAC/D,OACI,cAAC,EAAD,CAASzB,QAASwB,EAAExB,SAAcyB,MAI1C,OACI,sBAAKrC,UAAWC,IAAE8B,QAAlB,UACI,qBAAK/B,UAAWC,IAAEqC,aAAlB,SACKT,IAEL,sBAAK7B,UAAWC,IAAEkC,SAAlB,UACKD,EACD,cAACT,EAAD,CAA4BT,SArBrB,SAACJ,GAChBb,EAAMwC,WAAW3B,EAAQ4B,YACzB5B,EAAQ4B,WAAY,e,wBC6BbC,sBACXC,aAlBoB,SAACC,GACrB,MAAO,CACHb,YAAaa,EAAMb,eAgBI,CAACS,iBAC5BK,IAFWH,CAGbb","file":"static/js/3.07b5d922.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__13z6p\",\"dialogsItems\":\"Dialogs_dialogsItems__1UPj1\",\"activeLink\":\"Dialogs_activeLink__3YNT7\",\"dialog\":\"Dialogs_dialog__3reM9\",\"messages\":\"Dialogs_messages__1d7-R\",\"inputButton\":\"Dialogs_inputButton__3mfgJ\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType={\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport const DialogItem= React.memo((props: DialogItemPropsType)=>{\r\n    return <div className={s.dialog +' '+ s.active}>\r\n    <img alt={'images'} src=\"https://dthezntil550i.cloudfront.net/kg/latest/kg1802132010216500004834729/1280_960/557d644f-12f3-49e1-bb66-23c16400540d.png\"/>\r\n    <NavLink to={\"/dialogs/\"+ props.id} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n})\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport './Message.css';\r\n\r\ntype messagePropsType={\r\n    message: string\r\n}\r\n\r\nexport const Message=React.memo((props:messagePropsType) =>{\r\n    return <div className={s.message}>{props.message}</div>\r\n})\r\n\r\n\r\n","import s from \"./Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type  FormDataType = {\r\n    newMessage: string\r\n}\r\nconst maxValue= maxLengthCreator(100)\r\n\r\nexport const NewDialogsMessageForm = React.memo((props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.inputButton}>\r\n            <Field placeholder={'Enter your message'} name={'newMessage'} component={Textarea} validate={[ required, maxValue ]}/>\r\n            <button>send</button>\r\n        </form>)\r\n})\r\n\r\n\r\nexport const NewDialogsMessageReduxForm= React.memo(reduxForm<FormDataType>({form: 'DialogsNewMessage'})(NewDialogsMessageForm))","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {dialogsPageType} from \"./DialogsContainer\";\r\nimport {FormDataType, NewDialogsMessageReduxForm} from \"./NewDialogsMessageForm\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n    AddMessage: (newMessage: string) => void\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = React.memo((props) => {\r\n\r\n\r\n    const AddMessage = (message: FormDataType) => {\r\n        props.AddMessage(message.newMessage)\r\n        message.newMessage= ''\r\n    }\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map((d) =>\r\n        <DialogItem id={d.id} name={d.name}/>);\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(function (m, index) {\r\n        return (\r\n            <Message message={m.message} key={index}/>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <NewDialogsMessageReduxForm onSubmit={AddMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {AddMessage, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\nexport type messagesType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type dialogsType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type dialogsPageType = {\r\n    dialogs: Array<dialogsType>\r\n    messages: Array<messagesType>\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\n/*type mapDispatchPropsType = {\r\n    ChangeMessageAC: (newMessage: string) => void\r\n    AddMessageAC: () => void\r\n}*/\r\n\r\nlet mapToStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n/*let mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        ChangeMessageAC: (newMessage: string) => {\r\n            dispatch(ChangeMessageAC(newMessage))\r\n        },\r\n        AddMessageAC: () => {\r\n            dispatch(AddMessageAC())\r\n        }\r\n    }\r\n}*/\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapToStateToProps, {AddMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n"],"sourceRoot":""}